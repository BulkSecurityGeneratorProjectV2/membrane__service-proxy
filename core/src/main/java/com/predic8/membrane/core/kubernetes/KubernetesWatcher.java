/* Copyright 2009, 2021 predic8 GmbH, www.predic8.com

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */
package com.predic8.membrane.core.kubernetes;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.predic8.membrane.core.Router;
import com.predic8.membrane.core.config.spring.K8sHelperGeneratorAutoGenerated;
import com.predic8.membrane.core.config.spring.k8s.Envelope;
import com.predic8.membrane.core.config.spring.k8s.YamlLoader;
import com.predic8.membrane.core.interceptor.kubernetes.KubernetesValidationInterceptor;
import com.predic8.membrane.core.rules.Rule;
import io.fabric8.kubernetes.client.*;
import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;
import org.jose4j.json.internal.json_simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Creates watcher on all known CustomResourceDefinitions listed at {@link K8sHelperGeneratorAutoGenerated}
 */
public class KubernetesWatcher {
    private static final Logger LOG = LoggerFactory.getLogger(KubernetesWatcher.class);

    private final String NAMESPACE = "membrane-soa";

    private final Router router;
    private KubernetesClient client;

    private final List<Watch> watchers = new ArrayList<>();

    private List<CustomResourceDefinitionContext> crdContexts;

    private ConcurrentHashMap<String, Object> uuidMap = new ConcurrentHashMap<>();

    public KubernetesWatcher(Router router) {
        this.router = router;
    }

    public void start() {
        Optional<KubernetesValidationInterceptor> kvi = findK8sValidatingInterceptor();
        if (!kvi.isPresent()) {
            return;
        }

        client = getClient();

        createCrdContexts();
        Stream<CustomResourceDefinitionContext> contexts = crdContexts.stream();
        if (kvi.get().getResourcesList().size() > 0)
            contexts = contexts.filter(s -> kvi.get().getResourcesList().contains(s.getPlural()));
        contexts.forEach(this::createWatcher);
    }

    private KubernetesClient getClient() {
        return isInK8sCluster() ? new DefaultKubernetesClient()
                : new DefaultKubernetesClient(new ConfigBuilder()
                    .withMasterUrl("localhost:8001")
                    .build());
    }

    private Optional<KubernetesValidationInterceptor> findK8sValidatingInterceptor() {
        return router.getRules().stream()
                .map(rule -> rule.getInterceptors())
                .filter( i -> i != null)
                .flatMap(interceptors -> interceptors.stream())
                .filter(inter -> inter instanceof KubernetesValidationInterceptor)
                .map(inter -> (KubernetesValidationInterceptor) inter)
                .findFirst();
    }

    private boolean isInK8sCluster() {
        return System.getenv("KUBERNETES_SERVICE_HOST") != null;
    }

    private void createCrdContexts() {
        crdContexts = K8sHelperGeneratorAutoGenerated.crdPluralNames.stream()
                .map(name -> new CustomResourceDefinitionContext.Builder()
                        .withGroup("membrane-soa.org")
                        .withScope("Namespaced")
                        .withVersion("v1beta1")
                        .withPlural(name)
                        .build()
                ).collect(Collectors.toList());
    }

    @SuppressWarnings("rawtypes")
    private void createWatcher(CustomResourceDefinitionContext crd) {
        try {
            watchers.add(client.customResource(crd).watch(NAMESPACE, new Watcher<String>() {
                @Override
                public void eventReceived(Action action, String s) {
                    try {
                        if (LOG.isDebugEnabled())
                            LOG.debug(s + " " + action);
                        YamlLoader y = new YamlLoader();
                        Envelope envelope = y.load(new StringReader(s));

                        if (envelope.getSpec() instanceof Rule) {
                            Rule newRule = (Rule) envelope.getSpec();
                            try {
                                newRule.init(router);
                            } catch (Exception e) {
                                throw new RuntimeException("Could not init rule.");
                            }

                            Rule oldRule = null;
                            if (action == Action.MODIFIED || action == Action.DELETED)
                                oldRule = (Rule) uuidMap.get(envelope.getMetadata().getUid());

                            if (action == Action.ADDED)
                                router.add(newRule);
                            else if (action == Action.DELETED)
                                router.getRuleManager().removeRule(oldRule);
                            else if (action == Action.MODIFIED)
                                router.getRuleManager().replaceRule(oldRule, newRule);

                            if (action == Action.ADDED || action == Action.MODIFIED)
                                uuidMap.put(envelope.getMetadata().getUid(), newRule);
                            if (action == Action.DELETED)
                                uuidMap.remove(envelope.getMetadata().getUid());
                        }

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                @Override
                public void onClose(WatcherException e) {
                    LOG.error("Watcher for {} closed unexpectedly", crd.getPlural());
                }
            }));
            LOG.debug("Added Watcher for {}", crd.getPlural());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @SuppressWarnings("rawtypes")
    private String getUid(JSONObject json) {
        JSONObject metadata = new JSONObject((Map) json.get("metadata"));
        return (String) metadata.get("uid");
    }

    private String lowerFirstChar(String str) {
        if (str == null || str.isEmpty())
            return "";
        if (str.length() == 1)
            return str.toLowerCase();
        return str.substring(0, 1).toLowerCase() + str.substring(1);
    }
}
